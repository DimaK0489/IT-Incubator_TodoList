{"version":3,"sources":["serviceWorker.ts","api/todolists-a-p-i.ts","utils/errorUtils.ts","features/Todolists/Login/authReducer.ts","app/app-reducer.ts","features/Todolists/todolist/todoLists-reducer.ts","features/Todolists/todolist/tasks-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditTableSpan.tsx","features/Todolists/todolist/Task/Task.tsx","features/Todolists/todolist/Todolist.tsx","features/Todolists/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Todolists/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","todolistId","delete","put","taskTitle","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setAppInitializedAC","appReducer","todolistId1","v1","todolistId2","removeTodolistAC","index","findIndex","t","id","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","setTodolistsAC","map","tl","changeTodolistEntityStatusAC","todoListsReducer","Completed","todoListId","description","startDate","deadline","addedDate","order","priority","Low","New","removeTaskAC","tasks","addTaskAC","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","getState","task","find","apiModel","then","res","resultCode","catch","console","warn","rootReducer","combineReducers","todoLists","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","AddItemForm","React","memo","addItem","disabled","useState","newTaskTitle","setNewTaskTitle","setError","addItemHandler","trimmedTitle","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","key","helperText","label","IconButton","onClick","AddBox","EditTableSpan","props","editMode","setEditNode","autoFocus","onBlur","changeItem","onDoubleClick","Task","changeTitle","useCallback","changeTaskTitle","className","Checkbox","color","checked","newStatusValue","changeStatus","removeTask","Delete","TodoList","demo","useDispatch","useEffect","items","addTask","changeTodoListTitle","removeTodolist","taskForTodolist","style","listStyle","paddingLeft","Button","size","changeFilter","TodolistsList","useSelector","removeTasksTC","item","addTaskTC","removeTodolistTC","todolistID","changeTodolistTitleTC","addTodoList","addTodolistTC","Grid","container","padding","spacing","Paper","elevation","to","Alert","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","AppWithRedux","finally","logOutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","LinearProgress","exact","path","render","textAlign","from","top","width","CircularProgress","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dfdb7144.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\"\r\n\r\n//Types\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: T\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: Array<TaskType>\r\n}\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe?: boolean,\r\n    captcha?: string\r\n}\r\ntype AuthMeResponseType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\n// Settings\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'bf0875ba-8463-481a-87a8-643832194416'\r\n    }\r\n})\r\n\r\n// API\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>(\"todo-lists\")\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodolistType }>>(\"todo-lists\", {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<CommonResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<CommonResponseType<{item: TaskType }>>(`todo-lists/${todolistId}/tasks`,{title: taskTitle})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<CommonResponseType<{userId: number}>>(\"auth/login\", data)\r\n    },\r\n    me() {\r\n        return instance.get<CommonResponseType<AuthMeResponseType>>(\"auth/me\")\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonResponseType>(\"auth/login\")\r\n    }\r\n}\r\n","import {setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\r\nimport {CommonResponseType} from \"../api/todolists-a-p-i\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerAppError = <T>(data: CommonResponseType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC(error.message ? {error: error.message} : {error: \"Some error\"}))\r\n    dispatch(setAppStatusAC({status: \"failed\"}))\r\n}\r\n\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from \"../../../app/app-reducer\";\r\nimport {authAPI, LoginParamsType} from \"../../../api/todolists-a-p-i\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/errorUtils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n//Types\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n//Reducer\r\nexport const authReducer = slice.reducer\r\n//Action create\r\nexport const setIsLoggedInAC = slice.actions.setIsLoggedInAC\r\n//Thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logOutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n","import { setIsLoggedInAC } from \"../features/Todolists/Login/authReducer\"\r\nimport { Dispatch } from \"redux\"\r\nimport {authAPI} from \"../api/todolists-a-p-i\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n//Types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport const initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppInitializedAC(state, action: PayloadAction<{isInitialized: boolean}>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\n//Reducer\r\nexport const appReducer = slice.reducer\r\n//Action create (reducers)\r\nexport const {setAppStatusAC, setAppErrorAC, setAppInitializedAC} = slice.actions\r\n//Thunks\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me( )\r\n        .then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n            dispatch(setAppInitializedAC({isInitialized: true}))\r\n        } else {\r\n        }\r\n    })\r\n        .finally( () => {\r\n            dispatch(setAppInitializedAC({isInitialized: true}));\r\n        })\r\n}\r\n","import {v1} from \"uuid\";\r\nimport {todolistsAPI, TodolistType} from \"../../../api/todolists-a-p-i\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {RequestStatusType,setAppStatusAC,} from \"../../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/errorUtils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport const todolistId1 = v1()\r\nexport const todolistId2 = v1()\r\nlet initialState: Array<TodolistDomainType> = [\r\n    // {id: todolistId1, title: \"What to learn\", filter: \"all\", order: 0, addedDate: \"\"},\r\n    // {id: todolistId2, title: \"What to buy\", filter: \"all\", order: 0, addedDate: \"\"},\r\n];\r\n\r\n//Types\r\nexport type FilterValueType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValueType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nconst slice = createSlice( {\r\n    name: \"todolist\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{todolistId: string}>) {\r\n            const index = state.findIndex(t => t.id === action.payload.todolistId)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{todolist: TodolistType}>) {\r\n            state.unshift({...action.payload.todolist, filter: \"all\", entityStatus: \"idle\"})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{todolistId: string, title: string}>) {\r\n            const index = state.findIndex(t => t.id === action.payload.todolistId)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{filter: FilterValueType, todolistId: string}>) {\r\n            const index = state.findIndex(t => t.id === action.payload.todolistId)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{todolist: Array<TodolistType>}>) {\r\n            return action.payload.todolist.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}))\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{id: string, entityStatus: RequestStatusType}>) {\r\n            const index = state.findIndex(t => t.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.entityStatus\r\n        }\r\n    }\r\n})\r\n//Reducer\r\nexport const todoListsReducer = slice.reducer\r\n//Action create (reducers)\r\nexport const {removeTodolistAC, addTodolistAC, changeTodolistTitleAC, changeTodolistFilterAC,\r\n    setTodolistsAC, changeTodolistEntityStatusAC} = slice.actions\r\n//Thunks\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch, getState: () => AppRootStateType): void => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistsAPI.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            dispatch(setTodolistsAC({todolist: res.data}))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, entityStatus: \"loading\"}))\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            dispatch(removeTodolistAC({todolistId: todolistId}))\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistsAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const changeTodolistTitleTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistsAPI.updateTodolist(todolistId, title)\r\n        .then((res) => {\r\n            dispatch(changeTodolistTitleAC({todolistId: todolistId, title: title}))\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n","import {v1} from \"uuid\";\r\nimport {addTodolistAC, removeTodolistAC, setTodolistsAC, todolistId1, todolistId2} from \"./todoLists-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from \"../../../api/todolists-a-p-i\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {TasksStateType} from \"./Task/Task\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/errorUtils\";\r\nimport {setAppStatusAC} from \"../../../app/app-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nlet initialState: TasksStateType = {\r\n    [todolistId1]: [\r\n        {\r\n            id: v1(), title: \"HTML\", status: TaskStatuses.Completed, todoListId: todolistId1, description: \"\",\r\n            startDate: \"\", deadline: \"\", addedDate: \"\", order: 0, priority: TaskPriorities.Low\r\n        },\r\n        {\r\n            id: v1(), title: \"CSS\", status: TaskStatuses.Completed, todoListId: todolistId1, description: \"\",\r\n            startDate: \"\", deadline: \"\", addedDate: \"\", order: 0, priority: TaskPriorities.Low\r\n        },\r\n        {\r\n            id: v1(), title: \"JS\", status: TaskStatuses.New, todoListId: todolistId1, description: \"\",\r\n            startDate: \"\", deadline: \"\", addedDate: \"\", order: 0, priority: TaskPriorities.Low\r\n        }\r\n\r\n    ],\r\n    [todolistId2]: [\r\n        {\r\n            id: v1(), title: \"Milk\", status: TaskStatuses.Completed, todoListId: todolistId2, description: \"\",\r\n            startDate: \"\", deadline: \"\", addedDate: \"\", order: 0, priority: TaskPriorities.Low\r\n        },\r\n        {\r\n            id: v1(), title: \"Beef\", status: TaskStatuses.New, todoListId: todolistId2, description: \"\",\r\n            startDate: \"\", deadline: \"\", addedDate: \"\", order: 0, priority: TaskPriorities.Low\r\n        }\r\n\r\n    ]\r\n}\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC (state, action: PayloadAction<{taskId: string, todolistId: string}>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if(index > -1) {\r\n                tasks.splice(index,1)\r\n            }\r\n        },\r\n        addTaskAC (state, action: PayloadAction<TaskType>) {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        },\r\n        updateTaskAC (state, action: PayloadAction<{taskId: string, model: UpdateDomainTaskModelType, todolistId: string}>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if(index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC (state, action: PayloadAction<{tasks: Array<TaskType>, todolist: string}>) {\r\n            state[action.payload.todolist] = action.payload.tasks\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = [];\r\n        })\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.todolistId]\r\n        })\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolist.forEach((tl:any) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n})\r\n// Reducer\r\nexport const tasksReducer = slice.reducer\r\n\r\n// Actions\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions\r\n\r\n//Thunks\r\nexport const fetchTasksTC = (todolist: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistsAPI.getTasks(todolist)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({tasks, todolist}))\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const removeTasksTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            dispatch(removeTaskAC({taskId, todolistId}))\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState();\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn(\"task not found\")\r\n            return;\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...model\r\n        }\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC({taskId, model, todolistId}))\r\n                    dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n\r\n","import {tasksReducer} from '../features/Todolists/todolist/tasks-reducer';\r\nimport {todoListsReducer} from \"../features/Todolists/todolist/todoLists-reducer\";\r\nimport {combineReducers} from 'redux';\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from '../features/Todolists/Login/authReducer';\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type RootReducerType = typeof rootReducer;\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<RootReducerType>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) =>  {\r\n    const [newTaskTitle, setNewTaskTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) setError(null)\r\n        if (e.key === \"Enter\") addItemHandler();\r\n    }\r\n    const addItemHandler = () => {\r\n        let trimmedTitle = newTaskTitle.trim()\r\n        if (trimmedTitle !== \"\") {\r\n            addItem(trimmedTitle);\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n    return(\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={newTaskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                helperText={error}\r\n                label={\"Title\"}\r\n                error={!error}\r\n                disabled={disabled}\r\n            />\r\n            <IconButton onClick={addItemHandler} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n});","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditTablePropsType = {\r\n    title: string\r\n    changeItem: (newTaskTitle: string) => void\r\n}\r\n\r\nexport const EditTableSpan = React.memo((props: EditTablePropsType) => {\r\n    const [editMode, setEditNode] = useState<boolean>(false)\r\n    const [newTaskTitle, setNewTaskTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => {\r\n        setEditNode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditNode(false)\r\n        props.changeItem(newTaskTitle)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                variant={\"standard\"}\r\n                value={newTaskTitle}\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                onChange={onChangeHandler}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    );\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditTableSpan} from \"../../../../components/EditableSpan/EditTableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolists-a-p-i\";\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeStatus: (taskID: string, status: TaskStatuses, todolistID: string) => void\r\n    removeTask: (id: string, todolistID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todolistID: string) => void\r\n}\r\nexport type  TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onRemoveHandler = () => {\r\n        props.removeTask(props.task.id, props.todolistId)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newStatusValue = e.currentTarget.checked\r\n        props.changeStatus(props.task.id, newStatusValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }\r\n    const changeTitle = useCallback((title: string) => {\r\n        props.changeTaskTitle(props.task.id, title, props.todolistId)\r\n    }, [props.changeTaskTitle, props.task.id, props.todolistId])\r\n\r\n    return (\r\n        <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <Checkbox\r\n                color={\"secondary\"}\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                onChange={onChangeHandler}\r\n            />\r\n            <EditTableSpan title={props.task.title} changeItem={changeTitle}/>\r\n            <IconButton onClick={onRemoveHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditTableSpan} from \"../../../components/EditableSpan/EditTableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {FilterValueType, TodolistDomainType} from \"./todoLists-reducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolists-a-p-i\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"./tasks-reducer\";\r\n\r\nexport type TodoListProps = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistID: string) => void\r\n    changeFilter: (value: FilterValueType, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeStatus: (taskID: string, status: TaskStatuses, todolistID: string) => void\r\n    removeTodolist: (todolistID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todolistID: string) => void\r\n    changeTodoListTitle: (title: string, todolistID: string) => void\r\n    //entityStatus: RequestStatusType\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoList = React.memo(({demo = false,...props}: TodoListProps) =>  {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect( () => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    },[])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n    const changeTodoListTitle = useCallback((title: string) =>\r\n        props.changeTodoListTitle(title, props.todolist.id),[props.changeTodoListTitle, props.todolist.id])\r\n    const onAllClickHandler = () => {\r\n        props.changeFilter(\"all\", props.todolist.id)\r\n    }\r\n    const onActiveClickHandler = () => {\r\n        props.changeFilter(\"active\", props.todolist.id)\r\n    }\r\n    const onCompletedClickHandler = () => {\r\n        props.changeFilter(\"completed\", props.todolist.id)\r\n    }\r\n    const removeTask = useCallback(() => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }, [])\r\n    let taskForTodolist = props.tasks\r\n    if (props.todolist.filter === \"active\") {\r\n        taskForTodolist =  props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        taskForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    const tasks = taskForTodolist.map(t => {\r\n        return <Task task={t}\r\n                     key={t.id}\r\n                     removeTask={props.removeTask}\r\n                     changeTaskTitle={props.changeTaskTitle}\r\n                     changeStatus={props.changeStatus}\r\n                     todolistId={props.todolist.id}/>\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditTableSpan title={props.todolist.title} changeItem={changeTodoListTitle}/>\r\n                <IconButton onClick = {removeTask} disabled={props.todolist.entityStatus === \"loading\"}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === \"loading\"}/>\r\n            <ul style={{listStyle: \"none\", paddingLeft: \"0\"}}>{tasks}</ul>\r\n            <div>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.todolist.filter === \"all\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.todolist.filter === \"active\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.todolist.filter === \"completed\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n});","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {addTodolistTC,changeTodolistFilterAC,changeTodolistTitleTC,fetchTodolistsTC,FilterValueType,removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"./todolist/todoLists-reducer\";\r\nimport {addTaskTC, removeTasksTC, updateTaskTC} from \"./todolist/tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolists-a-p-i\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {TodoList} from \"./todolist/Todolist\";\r\nimport {TasksStateType} from \"./todolist/Task/Task\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<TodolistsListPropsType> = ({demo = false}) => {\r\n    const todoLists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\r\n        const action = removeTasksTC(taskId, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(title, todolistId))\r\n    }, [dispatch])\r\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(taskId, {status}, todolistId))\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((taskId: string, title: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(taskId, {title: title}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        const action = removeTodolistTC(todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeFilter = useCallback((value: FilterValueType, todolistID: string) => {\r\n        dispatch(changeTodolistFilterAC({filter: value, todolistId: todolistID}))\r\n    }, [dispatch])\r\n    const changeTodoListTitle = useCallback((todolistId: string, title: string) => {\r\n        dispatch(changeTodolistTitleTC(todolistId, title))\r\n    }, [dispatch])\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n    \r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    } \r\n    return <>\r\n        <Grid container style={{padding: \"7px 0\"}}> <AddItemForm addItem={addTodoList}/></Grid>\r\n        <Grid container spacing={10}>{\r\n            todoLists.map(t => {\r\n                let taskForTodolist = tasks[t.id]\r\n                return (\r\n                    <Grid item key={t.id}>\r\n                        <Paper elevation={10} style={{padding: \"20px\"}}>\r\n                            <TodoList\r\n                                key={t.id}\r\n                                todolist={t}\r\n                                //entityStatus={t.entityStatus}\r\n                                tasks={taskForTodolist}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodoListTitle={changeTodoListTitle}\r\n                                demo={demo}\r\n                            /></Paper>\r\n                    </Grid>\r\n                )\r\n            })}</Grid>\r\n    </>\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>((state) => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'click away') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>( (state) => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Password required\"\r\n            } else if (values.password.length < 3) {\r\n                errors.password = \"Password not less than 3 characters\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TodolistsList} from \"../features/Todolists/TodolistsList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType, initializeAppTC} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Route,Switch, Redirect} from 'react-router-dom';\r\nimport {Login} from \"../features/Todolists/Login/Login\";\r\nimport {logOutTC} from \"../features/Todolists/Login/authReducer\";\r\n\r\ntype AppWithReduxPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nconst AppWithRedux = ({demo = false}: AppWithReduxPropsType) => {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state => state.app.status))\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>( (state) => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect( () => {\r\n        dispatch(initializeAppTC())\r\n    },[])\r\n\r\n    const logOutHandler = useCallback( () => {\r\n        dispatch(logOutTC());\r\n    },[])\r\n    \r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    { isLoggedIn && <Button color=\"inherit\" onClick={logOutHandler}>Log Out</Button> }\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                {status === \"loading\" && <LinearProgress color=\"secondary\"/>}\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1 style={{textAlign: \"center\"}}>404.Page not found</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './app/store';\r\nimport AppWithRedux from \"./app/App\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <AppWithRedux/>\r\n            </BrowserRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}