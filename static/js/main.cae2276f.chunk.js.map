{"version":3,"sources":["serviceWorker.ts","api/Types.ts","utils/errorUtils.ts","api/todolists-a-p-i.ts","features/Todolists/Authorization/authReducer.ts","app/app-reducer.ts","features/Todolists/todolist/todoLists-reducer.ts","features/Todolists/todolist/tasks-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditTableSpan.tsx","features/Todolists/todolist/Task/Task.tsx","features/Todolists/todolist/Todolist.tsx","features/Todolists/Authorization/selectors.ts","features/Todolists/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Todolists/Authorization/Login.tsx","app/selectors.ts","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","todolistId","delete","put","taskTitle","taskId","model","authAPI","loginTC","createAsyncThunk","param","thunkAPI","a","res","resultCode","rejectWithValue","errors","fieldsErrors","undefined","logOutTC","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeAppTC","setAppInitializedAC","isInitialized","appReducer","todolistId1","v1","todolistId2","fetchTodolistsTC","todolist","removeTodolistTC","changeTodolistEntityStatusAC","id","entityStatus","addTodolistTC","item","changeTodolistTitleTC","changeTodolistFilterAC","index","findIndex","t","filter","map","tl","splice","unshift","todoListsReducer","Completed","todoListId","description","startDate","deadline","addedDate","order","priority","Low","New","fetchTasksTC","tasks","items","removeTasksTC","addTaskTC","updateTaskTC","getState","task","find","apiModel","tasksReducer","forEach","rootReducer","combineReducers","todoLists","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","AddItemForm","React","memo","addItem","disabled","useState","newTaskTitle","setNewTaskTitle","setError","addItemHandler","trimmedTitle","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","helperText","label","IconButton","color","onClick","style","marginLeft","AddBox","EditTableSpan","props","editMode","setEditNode","autoFocus","onBlur","changeItem","onDoubleClick","Task","changeTitle","useCallback","changeTaskTitle","className","Checkbox","checked","newStatusValue","changeStatus","removeTask","Delete","TodoList","demo","useDispatch","useEffect","addTodolist","addTask","changeTodoListTitle","removeTodolist","taskForTodolist","listStyle","paddingLeft","Button","size","changeFilter","selectIsLoggedIn","TodolistsList","useSelector","todolistID","addTodoList","Grid","container","padding","spacing","Paper","elevation","to","Alert","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","resetForm","justify","xs","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","selectStatus","selectIsInitialized","App","logOutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","LinearProgress","exact","path","render","textAlign","from","top","width","CircularProgress","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.cae2276f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//Types\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<{field: string, error: string}>\r\n    data: T\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: Array<TaskType>\r\n}\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe?: boolean,\r\n    captcha?: string\r\n}\r\nexport type AuthMeResponseType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}","import {setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {CommonResponseType} from \"../api/Types\";\r\n\r\nexport const handleServerAppError = <T>(data: CommonResponseType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC(error.message ? {error: error.message} : {error: \"Some error\"}))\r\n    dispatch(setAppStatusAC({status: \"failed\"}))\r\n}\r\n\r\n","import axios from \"axios\"\r\nimport {CommonResponseType, TodolistType, GetTasksResponse, TaskType, UpdateTaskModelType, LoginParamsType, AuthMeResponseType} from \"./Types\";\r\n\r\n// Settings\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'bf0875ba-8463-481a-87a8-643832194416'\r\n    }\r\n})\r\n\r\n// API\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>(\"todo-lists\")\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodolistType }>>(\"todo-lists\", {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<CommonResponseType>(`todo-lists/${todolistId}`, {title: title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<CommonResponseType<{item: TaskType }>>(`todo-lists/${todolistId}/tasks`,{title: taskTitle})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<CommonResponseType<{userId: number}>>(\"auth/login\", data)\r\n    },\r\n    me() {\r\n        return instance.get<CommonResponseType<AuthMeResponseType>>(\"auth/me\")\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonResponseType>(\"auth/login\")\r\n    }\r\n}\r\n","import {setAppStatusAC} from \"../../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/errorUtils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport { authAPI } from \"../../../api/todolists-a-p-i\";\r\nimport { LoginParamsType } from \"../../../api/Types\";\r\n\r\n//Thunks\r\nexport const loginTC = createAsyncThunk(\"auth/login\", async (param: LoginParamsType, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return;\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({errors: [error], fieldsErrors: undefined})\r\n    }\r\n})\r\nexport const logOutTC = createAsyncThunk(\"auth/logOut\", async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return;\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(loginTC.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n        })\r\n        builder.addCase(logOutTC.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n        })\r\n    }\r\n})\r\n//Reducer\r\nexport const authReducer = slice.reducer\r\n//Action create\r\nexport const setIsLoggedInAC = slice.actions.setIsLoggedInAC\r\n//Thunks\r\n/*export const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}*/\r\n/*export const logOutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({isLoggedIn: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}*/\r\n\r\n","import {setIsLoggedInAC} from \"../features/Todolists/Authorization/authReducer\"\r\nimport {authAPI} from \"../api/todolists-a-p-i\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n//Types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport const initializeAppTC = createAsyncThunk(\"app/initializeApp\", async (param, {dispatch}) => {\r\n    try {\r\n        const res = await authAPI.me()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({isLoggedIn: true}));\r\n        }\r\n    } finally {\r\n        dispatch(setAppInitializedAC({isInitialized: true}));\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: {\r\n        status: 'loading' as RequestStatusType,\r\n        error: null as string | null,\r\n        isInitialized: false\r\n    },\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeAppTC.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n        })\r\n    }\r\n})\r\n//Reducer\r\nexport const appReducer = slice.reducer\r\n//Action create (reducers)\r\nexport const {setAppStatusAC, setAppErrorAC, setAppInitializedAC} = slice.actions\r\n//Thunks\r\n/*export const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me( )\r\n        .then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({isLoggedIn: true}));\r\n            dispatch(setAppInitializedAC({isInitialized: true}))\r\n        } else {\r\n        }\r\n    })\r\n        .finally( () => {\r\n            dispatch(setAppInitializedAC({isInitialized: true}));\r\n        })\r\n}*/\r\n","import {v1} from \"uuid\";\r\nimport {RequestStatusType, setAppStatusAC,} from \"../../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/errorUtils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {TodolistType} from \"../../../api/Types\";\r\nimport {todolistsAPI} from \"../../../api/todolists-a-p-i\";\r\n\r\nexport const todolistId1 = v1()\r\nexport const todolistId2 = v1()\r\n\r\n//Thunks\r\nexport const fetchTodolistsTC = createAsyncThunk(\"todolist/fetchTodolists\", async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    const res = await todolistsAPI.getTodolists()\r\n    try {\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        return {todolist: res.data}\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\nexport const removeTodolistTC = createAsyncThunk(\"todolist/removeTodolist\", async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    thunkAPI.dispatch(changeTodolistEntityStatusAC({id: todolistId, entityStatus: \"loading\"}))\r\n    await todolistsAPI.deleteTodolist(todolistId)\r\n    try {\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        return {todolistId: todolistId}\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\nexport const addTodolistTC = createAsyncThunk(\"todolist/addTodolist\", async (title: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    const res = await todolistsAPI.createTodolist(title)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\nexport const changeTodolistTitleTC = createAsyncThunk(\"todolist/changeTodolistTitle\",\r\n    async (param: { todolistId: string, title: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    const res = await todolistsAPI.updateTodolist(param.todolistId, param.title)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            return {todolistId: param.todolistId, title: param.title}\r\n        } else {\r\n            return handleServerAppError(res.data, thunkAPI.dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\n//Types\r\nexport type FilterValueType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValueType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"todolist\",\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ filter: FilterValueType, todolistId: string }>) {\r\n            const index = state.findIndex(t => t.id === action.payload.todolistId)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) {\r\n            const index = state.findIndex(t => t.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.entityStatus\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n                return action.payload.todolist.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}))\r\n            })\r\n            .addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(t => t.id === action.payload.todolistId)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTodolistTC.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: \"all\", entityStatus: \"idle\"})\r\n            })\r\n            .addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n                // @ts-ignore\r\n                const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                // @ts-ignore\r\n                state[index].title = action.payload.title\r\n            })\r\n    }\r\n})\r\n//Reducer\r\nexport const todoListsReducer = slice.reducer\r\n//Action create (reducers)\r\nexport const {changeTodolistFilterAC, changeTodolistEntityStatusAC} = slice.actions\r\n//Thunks\r\n/*export const fetchTodolistsTC = () => (dispatch: Dispatch, getState: () => AppRootStateType): void => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistsAPI.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            dispatch(setTodolistsAC({todolist: res.data}))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}*/\r\n/*export const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, entityStatus: \"loading\"}))\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            dispatch(removeTodolistAC({todolistId: todolistId}))\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}*/\r\n/*export const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistsAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}*/\r\n/*export const changeTodolistTitleTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistsAPI.updateTodolist(todolistId, title)\r\n        .then((res) => {\r\n            dispatch(changeTodolistTitleAC({todolistId: todolistId, title: title}))\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}*/\r\n\r\n\r\n","import {v1} from \"uuid\";\r\nimport {addTodolistTC, fetchTodolistsTC, removeTodolistTC, todolistId1, todolistId2} from \"./todoLists-reducer\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {TasksStateType} from \"./Task/Task\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/errorUtils\";\r\nimport {setAppStatusAC} from \"../../../app/app-reducer\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {todolistsAPI} from \"../../../api/todolists-a-p-i\";\r\nimport { UpdateTaskModelType, TaskStatuses, TaskPriorities } from \"../../../api/Types\";\r\n\r\nlet initialState: TasksStateType = {\r\n    [todolistId1]: [\r\n        {\r\n            id: v1(), title: \"HTML\", status: TaskStatuses.Completed, todoListId: todolistId1, description: \"\",\r\n            startDate: \"\", deadline: \"\", addedDate: \"\", order: 0, priority: TaskPriorities.Low\r\n        },\r\n        {\r\n            id: v1(), title: \"CSS\", status: TaskStatuses.Completed, todoListId: todolistId1, description: \"\",\r\n            startDate: \"\", deadline: \"\", addedDate: \"\", order: 0, priority: TaskPriorities.Low\r\n        },\r\n        {\r\n            id: v1(), title: \"JS\", status: TaskStatuses.New, todoListId: todolistId1, description: \"\",\r\n            startDate: \"\", deadline: \"\", addedDate: \"\", order: 0, priority: TaskPriorities.Low\r\n        }\r\n\r\n    ],\r\n    [todolistId2]: [\r\n        {\r\n            id: v1(), title: \"Milk\", status: TaskStatuses.Completed, todoListId: todolistId2, description: \"\",\r\n            startDate: \"\", deadline: \"\", addedDate: \"\", order: 0, priority: TaskPriorities.Low\r\n        },\r\n        {\r\n            id: v1(), title: \"Beef\", status: TaskStatuses.New, todoListId: todolistId2, description: \"\",\r\n            startDate: \"\", deadline: \"\", addedDate: \"\", order: 0, priority: TaskPriorities.Low\r\n        }\r\n\r\n    ]\r\n}\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\n//Thunks\r\nexport const fetchTasksTC = createAsyncThunk(\"tasks/fetchTasks\", async (todolist: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    const res = await todolistsAPI.getTasks(todolist)\r\n    const tasks = res.data.items\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n    return {tasks, todolist}\r\n})\r\nexport const removeTasksTC = createAsyncThunk(\"tasks/removeTasks\", async (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n    return {taskId: param.taskId, todolistId: param.todolistId}\r\n})\r\nexport const addTaskTC = createAsyncThunk(\"tasks/addTask\", async (param: { title: string, todolistId: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    try {\r\n        const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            return res.data.data.item\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (error) {\r\n        handleServerAppError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\nexport const updateTaskTC = createAsyncThunk(\"tasks/updateTask\", async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string }, thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType;\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue(\"task not found\");\r\n    }\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model\r\n    }\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            return param\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue(null);\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null);\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        /*removeTaskAC (state, action: PayloadAction<{taskId: string, todolistId: string}>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if(index > -1) {\r\n                tasks.splice(index,1)\r\n            }\r\n        },*/\r\n        /*addTaskAC(state, action: PayloadAction<TaskType>) {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        },*/\r\n        /*setTasksAC (state, action: PayloadAction<{tasks: Array<TaskType>, todolist: string}>) {\r\n           state[action.payload.todolist] = action.payload.tasks\r\n       },*/\r\n        /*updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },*/\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = [];\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.todolistId]\r\n        })\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolist.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist] = action.payload.tasks\r\n        })\r\n        builder.addCase(removeTasksTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        })\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        })\r\n\r\n    }\r\n})\r\n// Reducer\r\nexport const tasksReducer = slice.reducer\r\n\r\n// Actions\r\n//export const {} = slice.actions\r\n//Thunks\r\n/*export const fetchTasksTC = (todolist: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistsAPI.getTasks(todolist)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({tasks, todolist}))\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}*/\r\n/*export const removeTasksTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId,taskId)\r\n        .then((res) => {\r\n            dispatch(removeTaskAC({taskId, todolistId}))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}*/\r\n/*export const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}*/\r\n/*export const updateTaskTC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState();\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn(\"task not found\")\r\n            return;\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...model\r\n        }\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC({taskId, model, todolistId}))\r\n                    dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }*/\r\n\r\n\r\n","import {tasksReducer} from '../features/Todolists/todolist/tasks-reducer';\r\nimport {todoListsReducer} from \"../features/Todolists/todolist/todoLists-reducer\";\r\nimport {combineReducers} from 'redux';\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from '../features/Todolists/Authorization/authReducer';\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type RootReducerType = typeof rootReducer;\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<RootReducerType>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport type AppDispatchType = typeof store.dispatch\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) =>  {\r\n    const [newTaskTitle, setNewTaskTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) setError(null)\r\n        if (e.key === \"Enter\") addItemHandler();\r\n    }\r\n    const addItemHandler = () => {\r\n        let trimmedTitle = newTaskTitle.trim()\r\n        if (trimmedTitle !== \"\") {\r\n            addItem(trimmedTitle);\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n    return(\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={newTaskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                helperText={error}\r\n                label={\"Enter the title\"}\r\n                error={!!error}\r\n                disabled={disabled}\r\n            />\r\n            <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled} style={{marginLeft: '5px'}}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n});","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditTablePropsType = {\r\n    title: string\r\n    changeItem: (newTaskTitle: string) => void\r\n}\r\n\r\nexport const EditTableSpan = React.memo((props: EditTablePropsType) => {\r\n    const [editMode, setEditNode] = useState<boolean>(false)\r\n    const [newTaskTitle, setNewTaskTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => {\r\n        setEditNode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditNode(false)\r\n        props.changeItem(newTaskTitle)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                variant={\"standard\"}\r\n                value={newTaskTitle}\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                onChange={onChangeHandler}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    );\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditTableSpan} from \"../../../../components/EditableSpan/EditTableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/Types\";\r\n\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeStatus: (taskID: string, status: TaskStatuses, todolistID: string) => void\r\n    removeTask: (id: string, todolistID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todolistID: string) => void\r\n}\r\nexport type  TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onRemoveHandler = () => {\r\n        props.removeTask(props.task.id, props.todolistId)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newStatusValue = e.currentTarget.checked\r\n        props.changeStatus(props.task.id, newStatusValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }\r\n    const changeTitle = useCallback((title: string) => {\r\n        props.changeTaskTitle(props.task.id, title, props.todolistId)\r\n    }, [props.changeTaskTitle, props.task.id, props.todolistId])\r\n\r\n    return (\r\n        <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <Checkbox\r\n                color={\"secondary\"}\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                onChange={onChangeHandler}\r\n            />\r\n            <EditTableSpan title={props.task.title} changeItem={changeTitle}/>\r\n            <IconButton onClick={onRemoveHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditTableSpan} from \"../../../components/EditableSpan/EditTableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {changeTodolistTitleTC, FilterValueType, TodolistDomainType} from \"./todoLists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"./tasks-reducer\";\r\nimport {TaskType, TaskStatuses} from \"../../../api/Types\";\r\n\r\nexport type TodoListProps = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistID: string) => void\r\n    changeFilter: (value: FilterValueType, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeStatus: (taskID: string, status: TaskStatuses, todolistID: string) => void\r\n    removeTodolist: (todolistID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todolistID: string) => void\r\n    changeTodoListTitle: (title: string, todolistID: string) => void\r\n    //entityStatus: RequestStatusType\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoList = React.memo(({demo = false, ...props}: TodoListProps) => {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        dispatch(changeTodolistTitleTC({todolistId: props.todolist.id, title: title}))\r\n    }, [props.todolist.id])\r\n\r\n    const onAllClickHandler = () => {\r\n        props.changeFilter(\"all\", props.todolist.id)\r\n    }\r\n\r\n    const onActiveClickHandler = () => {\r\n        props.changeFilter(\"active\", props.todolist.id)\r\n    }\r\n\r\n    const onCompletedClickHandler = () => {\r\n        props.changeFilter(\"completed\", props.todolist.id)\r\n    }\r\n\r\n    const removeTask = useCallback(() => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }, [])\r\n\r\n    let taskForTodolist = props.tasks\r\n    if (props.todolist.filter === \"active\") {\r\n        taskForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        taskForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n\r\n    }\r\n    const tasks = taskForTodolist.map(t => {\r\n        return <Task task={t}\r\n                     key={t.id}\r\n                     removeTask={props.removeTask}\r\n                     changeTaskTitle={props.changeTaskTitle}\r\n                     changeStatus={props.changeStatus}\r\n                     todolistId={props.todolist.id}/>\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditTableSpan title={props.todolist.title} changeItem={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTask} disabled={props.todolist.entityStatus === \"loading\"}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTodolist} disabled={props.todolist.entityStatus === \"loading\"}/>\r\n            <ul style={{listStyle: \"none\", paddingLeft: \"0\"}}>{tasks}</ul>\r\n            <div>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.todolist.filter === \"all\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.todolist.filter === \"active\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.todolist.filter === \"completed\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n});","import {AppRootStateType} from \"../../../app/store\";\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {addTodolistTC,changeTodolistFilterAC,changeTodolistTitleTC,fetchTodolistsTC,FilterValueType,removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"./todolist/todoLists-reducer\";\r\nimport {addTaskTC,  updateTaskTC, removeTasksTC} from \"./todolist/tasks-reducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {TodoList} from \"./todolist/Todolist\";\r\nimport {TasksStateType} from \"./todolist/Task/Task\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {selectIsLoggedIn} from \"./Authorization/selectors\";\r\nimport {TaskStatuses} from \"../../api/Types\";\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<TodolistsListPropsType> = ({demo = false}) => {\r\n    const todoLists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\r\n        const action = removeTasksTC({taskId, todolistId})\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC({title, todolistId}))\r\n    }, [dispatch])\r\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC({taskId: taskId, model: {status}, todolistId: todolistId}))\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((taskId: string, title: string, todolistId: string) => {\r\n        dispatch(updateTaskTC({taskId: taskId, model: {title: title}, todolistId: todolistId}))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        const action = removeTodolistTC(todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeFilter = useCallback((value: FilterValueType, todolistID: string) => {\r\n        dispatch(changeTodolistFilterAC({filter: value, todolistId: todolistID}))\r\n    }, [dispatch])\r\n    const changeTodoListTitle = useCallback((todolistId: string, title: string) => {\r\n        dispatch(changeTodolistTitleTC({todolistId, title}))\r\n    }, [dispatch])\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n    \r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    } \r\n    return <>\r\n        <Grid container style={{padding: \"7px 0\"}}> <AddItemForm addItem={addTodoList}/></Grid>\r\n        <Grid container spacing={10}>{\r\n            todoLists.map(t => {\r\n                let taskForTodolist = tasks[t.id]\r\n                return (\r\n                    <Grid item key={t.id}>\r\n                        <Paper elevation={10} style={{padding: \"20px\"}}>\r\n                            <TodoList\r\n                                key={t.id}\r\n                                todolist={t}\r\n                                //entityStatus={t.entityStatus}\r\n                                tasks={taskForTodolist}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodoListTitle={changeTodoListTitle}\r\n                                demo={demo}\r\n                            /></Paper>\r\n                    </Grid>\r\n                )\r\n            })}</Grid>\r\n    </>\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>((state) => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'click away') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppDispatchType} from \"../../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {selectIsLoggedIn} from \"./selectors\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch: AppDispatchType = useDispatch();\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Password required\"\r\n            } else if (values.password.length < 3) {\r\n                errors.password = \"Password not less than 3 characters\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import {AppRootStateType} from \"./store\";\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TodolistsList} from \"../features/Todolists/TodolistsList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {initializeAppTC} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from \"../features/Todolists/Authorization/Login\";\r\nimport {logOutTC} from \"../features/Todolists/Authorization/authReducer\";\r\nimport {selectIsInitialized, selectStatus} from \"./selectors\";\r\nimport {selectIsLoggedIn} from \"../features/Todolists/Authorization/selectors\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nconst App = ({demo = false}: PropsType) => {\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    const logOutHandler = useCallback(() => {\r\n        dispatch(logOutTC());\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logOutHandler}>Log Out</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                {status === \"loading\" && <LinearProgress color=\"secondary\"/>}\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1 style={{textAlign: \"center\"}}>404.Page not found</h1>}/>\r\n                    <Redirect from={'*'} to={'/login'}/>\r\n                </Switch>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    );\r\n}\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './app/store';\r\nimport App from \"./app/App\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <App/>\r\n            </BrowserRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}